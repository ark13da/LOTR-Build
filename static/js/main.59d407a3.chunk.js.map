{"version":3,"sources":["app/hooks/hooks.ts","app/slices/lotrDeckSlice.tsx","app/components/Search/index.tsx","app/components/DeckCards/index.tsx","app/components/SingleCard/index.tsx","app/components/Deck/index.tsx","app/hooks/useFetchDeck.tsx","app/components/App/index.tsx","app/store/index.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","lotrDeckSlice","createSlice","name","initialState","userInput","deckBaseUrl","deckResponseFormat","HeroCardBaseUrl","HeroCardResponseFormat","deckResponse","deckHasError","deckError","deckHeroCards","reducers","updateUserInput","state","action","payload","updateDeckResponse","updateDeckHasError","updateDeckError","updateHeroCards","emptyHeroCards","actions","selectLotrDeck","lotrDeck","Search","dispatch","useState","setUserInput","className","htmlFor","id","type","placeholder","onChange","e","target","value","onKeyPress","key","Number","DeckCards","props","onClick","openCard","code","src","imagesrc","alt","SingleCard","closeBtn","type_name","traits","text","flavor","threat","willpower","attack","defense","health","Deck","singleHeroDisplay","setSingleHeroDisplay","singleHeroProps","setSingleHeroProps","useEffect","a","customDeckUrl","axios","get","deckRes","data","hasOwnProperty","error","hero","customHeroUrl","heroRes","heroes","useFetchDeck","heroObject","find","map","App","store","configureStore","reducer","lotrDeckReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.59d407a3.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from 'app/store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { RootState } from \"app/store\"\r\nimport { lotrDeckState, heroCardInterface, deckResponse } from \"app/models/interfaces\";\r\n\r\nconst initialState: lotrDeckState = {\r\n  userInput: 13,\r\n  deckBaseUrl: \"https://ringsdb.com/api/oauth2/deck/load/\",\r\n  deckResponseFormat: \"?_format=json\",\r\n  HeroCardBaseUrl: \"https://ringsdb.com/api/public/card/\",\r\n  HeroCardResponseFormat: \".json\",\r\n  deckResponse: {},\r\n  deckHasError: true,\r\n  deckError: \"\",\r\n  deckHeroCards: [],\r\n}\r\n\r\nexport const lotrDeckSlice = createSlice({\r\n  name: \"lotrDeck\",\r\n  initialState,\r\n  reducers: {\r\n    updateUserInput: (state, action: PayloadAction<number>) => {\r\n      state.userInput = action.payload\r\n    },\r\n    updateDeckResponse: (state, action: PayloadAction<deckResponse>) => {\r\n      state.deckResponse = action.payload\r\n    },\r\n    updateDeckHasError: (state, action: PayloadAction<boolean>) => {\r\n      state.deckHasError = action.payload\r\n    },\r\n    updateDeckError: (state, action: PayloadAction<string>) => {\r\n      state.deckError = action.payload\r\n    },\r\n    updateHeroCards: (state, action: PayloadAction<heroCardInterface>) => {\r\n      state.deckHeroCards = [...state.deckHeroCards, action.payload]\r\n    },\r\n    emptyHeroCards: (state) => {\r\n      state.deckHeroCards = []\r\n    },\r\n  },\r\n})\r\n\r\n//action\r\nexport const {\r\n  updateDeckHasError,\r\n  updateDeckError,\r\n  updateHeroCards,\r\n  updateUserInput,\r\n  updateDeckResponse,\r\n  emptyHeroCards,\r\n} = lotrDeckSlice.actions\r\n\r\n//selector\r\nexport const selectLotrDeck = (state: RootState) => state.lotrDeck\r\n\r\nexport default lotrDeckSlice.reducer\r\n","import React, { useState } from \"react\";\r\nimport { useAppDispatch } from \"app/hooks/hooks\";\r\nimport \"app/components/Search/Search.css\";\r\nimport {\r\n    updateUserInput,\r\n    updateDeckError,\r\n    updateDeckHasError,\r\n} from \"app/slices/lotrDeckSlice\";\r\n\r\nexport const Search = () => {\r\n    const dispatch = useAppDispatch();\r\n    const [userInput, setUserInput] = useState<string>(\"\");\r\n    const inputHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setUserInput(e.target.value);\r\n    };\r\n    const userInputUpdateHandler = (\r\n        e: React.KeyboardEvent<HTMLInputElement>\r\n    ): void => {\r\n        if (e.key === \"Enter\") {\r\n            if (Number(userInput)) {\r\n                dispatch(updateUserInput(Number(userInput)));\r\n            } else {\r\n                dispatch(updateDeckHasError(true));\r\n                dispatch(updateDeckError(\"Try numerical Ids!\"));\r\n            }\r\n        };\r\n    };\r\n\r\n    return (\r\n        <div className=\"searchBox\">\r\n            <label className=\"searchLableText\" htmlFor=\"deckId\">\r\n                Search for a decklist here\r\n            </label>\r\n            <input\r\n                id=\"deckId\"\r\n                type=\"text\"\r\n                placeholder=\"Enter the deck Id\"\r\n                onChange={inputHandler}\r\n                onKeyPress={userInputUpdateHandler}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n","import { deckCardsProps } from \"app/models/interfaces\";\r\nimport \"app/components/DeckCards/DeckCard.css\";\r\n\r\nconst DeckCards = (props: deckCardsProps) => {\r\n  return (\r\n    <div\r\n      className=\"deckCard\"\r\n      onClick={() => props.openCard(props.code)}\r\n    >\r\n      <img\r\n        className=\"deckCardImg\"\r\n        src={`https://ringsdb.com/${props.imagesrc}`}\r\n        alt=\"Hero\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DeckCards\r\n","import { heroCardprops } from \"app/models/interfaces\";\r\nimport \"app/components/SingleCard/SingleCard.css\";\r\n\r\nconst SingleCard = ({\r\n  name,\r\n  imagesrc,\r\n  closeBtn,\r\n  type_name,\r\n  traits,\r\n  text,\r\n  flavor,\r\n  threat,\r\n  willpower,\r\n  attack,\r\n  defense,\r\n  health,\r\n}: heroCardprops) => {\r\n  return (\r\n    <div className=\"overLay\">\r\n      <div className=\"singleCard\">\r\n        <div className=\"singleCardHeader\">\r\n          <p className=\"titleText\">{name}</p>\r\n          <button className=\"closeBtn\" onClick={() => closeBtn()}>\r\n            &#x2716;\r\n          </button>\r\n        </div>\r\n        <div className=\"singleCardContent\">\r\n          <div>\r\n            <img\r\n              className=\"singleCardImg\"\r\n              src={`https://ringsdb.com/${imagesrc}`}\r\n              alt=\"Hero\"\r\n            />\r\n          </div>\r\n          <div className=\"singleCardStats\">\r\n            <div className=\"cardInfoSection\">\r\n              <p className=\"titleText\">{type_name}</p>\r\n              <p className=\"boldText\">{traits}</p>\r\n            </div>\r\n            <div className=\"cardInfoSection\">\r\n              <p>Threat: {threat}</p>\r\n              <p>Health: {health}</p>\r\n              <p>Attack: {attack}</p>\r\n              <p>Defence: {defense}</p>\r\n              <p>Willpower: {willpower}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"singleCardInfo\">\r\n            <div className=\"cardInfoSection\">\r\n              <p>{text}</p>\r\n            </div>\r\n            <div className=\"cardInfoSection\">\r\n              <p>{flavor}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SingleCard\r\n","import { useState } from \"react\";\r\nimport { useAppSelector } from \"app/hooks/hooks\";\r\nimport { selectLotrDeck } from \"app/slices/lotrDeckSlice\";\r\nimport { useFetchDeck } from \"app/hooks/useFetchDeck\";\r\nimport DeckCards from \"app/components/DeckCards\";\r\nimport SingleCard from \"app/components/SingleCard\";\r\nimport { heroCardInterface } from \"app/models/interfaces\";\r\nimport \"app/components/Deck/Deck.css\";\r\n\r\nexport const Deck = () => {\r\n    // grants read access to state object\r\n    const lotrDeck = useAppSelector(selectLotrDeck);\r\n\r\n    // display switch fro single selected Hero card\r\n    const [singleHeroDisplay, setSingleHeroDisplay] = useState<boolean>(false);\r\n    // local state that holds information of single selected hero for singleCard component \r\n    const [singleHeroProps, setSingleHeroProps] = useState<heroCardInterface>();\r\n\r\n\r\n    // custom hook that fetches the data from remote server and updates the state\r\n    useFetchDeck();\r\n\r\n    // opens single hero card by populating singleHeroProps state\r\n    const openCard = (id: string): void => {\r\n        const heroObject = lotrDeck.deckHeroCards.find((hero: heroCardInterface) => hero.code === id);\r\n        setSingleHeroProps(heroObject);\r\n        setSingleHeroDisplay(true);\r\n    };\r\n\r\n    //depopulates singleHeroProps which stops SingleCard component from being rendered and displayed\r\n    const closeCard = (): void => {\r\n        setSingleHeroDisplay(false);\r\n    };\r\n\r\n    //conditional rendering in case of errors in fetching the deck\r\n    if (lotrDeck.deckHasError) {\r\n        return (\r\n            <div>\r\n                <p className=\"deckTiltleText\">{lotrDeck.deckError}</p>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    //conditional rendering in case of success in fetching the deck\r\n    return (\r\n        <div className=\"deckContainer\">\r\n            <p className=\"deckTiltleText\">{lotrDeck.deckResponse.name}</p>\r\n            <div className=\"cardsContainer\">\r\n                {lotrDeck.deckHeroCards.map((hero: heroCardInterface) => {\r\n                    return (\r\n                        <DeckCards\r\n                            key={hero.code}\r\n                            code={hero.code}\r\n                            imagesrc={hero.imagesrc}\r\n                            openCard={openCard}\r\n                        />\r\n                    )\r\n                })}\r\n            </div>\r\n            {singleHeroDisplay === true? (\r\n                <SingleCard\r\n                    closeBtn={closeCard}\r\n                    name={singleHeroProps!.name}\r\n                    code={singleHeroProps!.code}\r\n                    imagesrc={singleHeroProps!.imagesrc}\r\n                    type_name={singleHeroProps!.type_name}\r\n                    traits={singleHeroProps!.traits}\r\n                    text={singleHeroProps!.text}\r\n                    flavor={singleHeroProps!.flavor}\r\n                    threat={singleHeroProps!.threat}\r\n                    willpower={singleHeroProps!.willpower}\r\n                    health={singleHeroProps!.health}\r\n                    attack={singleHeroProps!.attack}\r\n                    defense={singleHeroProps!.defense}\r\n                />\r\n            ) : (\r\n                <br/>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useAppSelector, useAppDispatch } from \"app/hooks/hooks\";\r\nimport {\r\n    updateDeckResponse,\r\n    updateDeckHasError,\r\n    updateDeckError,\r\n    updateHeroCards,\r\n    selectLotrDeck,\r\n    emptyHeroCards\r\n} from \"app/slices/lotrDeckSlice\";\r\n\r\nexport const useFetchDeck = () => {\r\n\r\n    const lotrDeck = useAppSelector(selectLotrDeck);\r\n    const dispatch = useAppDispatch();\r\n\r\n    // fetch deck and heros data and upate the state each time user enters new search term\r\n    useEffect(() => {\r\n\r\n        (async () => {\r\n            const customDeckUrl = lotrDeck.deckBaseUrl + lotrDeck.userInput + lotrDeck.deckResponseFormat;\r\n            try {\r\n                const deckRes = await axios.get(customDeckUrl);\r\n                if (deckRes.data.hasOwnProperty(\"error\")) {\r\n                    dispatch(updateDeckHasError(true));\r\n                    dispatch(updateDeckError(deckRes.data.error));\r\n                } else if (!deckRes.data.hasOwnProperty(\"heroes\")) {\r\n                    dispatch(updateDeckHasError(true));\r\n                    dispatch(updateDeckError(\"Deck is empty!\"));\r\n                } else {\r\n                    dispatch(updateDeckHasError(false));\r\n                    dispatch(updateDeckResponse(deckRes.data));\r\n                    dispatch(emptyHeroCards());\r\n                    for (let hero in deckRes.data.heroes) {\r\n                        (async () => {\r\n                            try {\r\n                                const customHeroUrl = lotrDeck.HeroCardBaseUrl + hero + lotrDeck.HeroCardResponseFormat;\r\n                                const heroRes = await axios.get(customHeroUrl);\r\n                                dispatch(updateHeroCards(heroRes.data));\r\n                            }\r\n                            catch {\r\n                                dispatch(updateDeckHasError(true));\r\n                                dispatch(updateDeckError(\"Failed to retrieve data!\"));\r\n                            }\r\n                        })();\r\n                    }\r\n                }\r\n            }\r\n            catch {\r\n                dispatch(updateDeckHasError(true));\r\n                dispatch(updateDeckError(\"Failed to retrieve data!\"));\r\n            }\r\n        })();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [lotrDeck.userInput])\r\n};","import { Search } from \"app/components/Search\"\r\nimport { Deck } from \"app/components/Deck\"\r\nimport \"app/components/App/App.css\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"appTitle\">Lord of the rings' card decks</h1>\r\n      <Search />\r\n      <Deck />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport lotrDeckReducer from 'app/slices/lotrDeckSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    lotrDeck: lotrDeckReducer,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from 'app/components/App';\r\nimport { store } from 'app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from 'serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();"],"sourceRoot":""}