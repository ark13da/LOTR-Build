{"version":3,"sources":["app/hooks/hooks.ts","app/slices/lotrDeckSlice.ts","app/components/Search/index.tsx","app/components/DeckCards/index.tsx","app/components/SingleCard/index.tsx","app/components/Deck/index.tsx","app/hooks/useFetchDeck.ts","app/components/App/index.tsx","app/store/index.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","lotrDeckSlice","createSlice","name","initialState","userInput","deckBaseUrl","deckResponseFormat","HeroCardBaseUrl","HeroCardResponseFormat","deckResponse","deckHasError","deckError","deckHeroCards","reducers","updateUserInput","state","action","payload","updateDeckResponse","updateDeckHasError","updateDeckError","updateHeroCards","emptyHeroCards","actions","selectLotrDeck","lotrDeck","Search","dispatch","useState","setUserInput","className","htmlFor","id","type","placeholder","onChange","e","target","value","onKeyPress","key","Number","DeckCards","code","openCard","imagesrc","onClick","src","alt","SingleCard","closeBtn","type_name","traits","text","flavor","threat","willpower","attack","defense","health","Deck","singleHeroDisplay","setSingleHeroDisplay","singleHeroProps","setSingleHeroProps","useEffect","a","customDeckUrl","axios","get","deckRes","data","hasOwnProperty","error","Object","keys","heroes","forEach","hero","customHeroUrl","heroRes","useFetchDeck","heroObject","find","currentTarget","map","App","store","configureStore","reducer","lotrDeckReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4923c51c.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from 'app/store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from 'app/store';\nimport { LotrDeckStateIntf, HeroCardIntf, DeckResponseIntf } from 'app/models/interfaces';\n\nconst initialState: LotrDeckStateIntf = {\n  userInput: 13,\n  deckBaseUrl: 'https://ringsdb.com/api/oauth2/deck/load/',\n  deckResponseFormat: '?_format=json',\n  HeroCardBaseUrl: 'https://ringsdb.com/api/public/card/',\n  HeroCardResponseFormat: '.json',\n  deckResponse: {},\n  deckHasError: true,\n  deckError: '',\n  deckHeroCards: [],\n};\n\nexport const lotrDeckSlice = createSlice({\n  name: 'lotrDeck',\n  initialState,\n  reducers: {\n    updateUserInput: (state, action: PayloadAction<number>) => {\n      state.userInput = action.payload;\n    },\n    updateDeckResponse: (state, action: PayloadAction<DeckResponseIntf>) => {\n      state.deckResponse = action.payload;\n    },\n    updateDeckHasError: (state, action: PayloadAction<boolean>) => {\n      state.deckHasError = action.payload;\n    },\n    updateDeckError: (state, action: PayloadAction<string>) => {\n      state.deckError = action.payload;\n    },\n    updateHeroCards: (state, action: PayloadAction<HeroCardIntf>) => {\n      state.deckHeroCards = [...state.deckHeroCards, action.payload];\n    },\n    emptyHeroCards: (state) => {\n      state.deckHeroCards = [];\n    },\n  },\n});\n\n// action\nexport const {\n  updateDeckHasError,\n  updateDeckError,\n  updateHeroCards,\n  updateUserInput,\n  updateDeckResponse,\n  emptyHeroCards,\n} = lotrDeckSlice.actions;\n\n// selector\nexport const selectLotrDeck = (state: RootState) => state.lotrDeck;\n\nexport default lotrDeckSlice.reducer;\n","import React, { useState } from 'react';\nimport { useAppDispatch } from 'app/hooks/hooks';\nimport 'app/components/Search/Search.css';\nimport { updateUserInput, updateDeckError, updateDeckHasError } from 'app/slices/lotrDeckSlice';\n\nconst Search = () => {\n  const dispatch = useAppDispatch();\n  const [userInput, setUserInput] = useState<string>('');\n  const inputHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setUserInput(e.target.value);\n  };\n  const userInputUpdateHandler = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === 'Enter') {\n      if (Number(userInput)) {\n        dispatch(updateUserInput(Number(userInput)));\n      } else {\n        dispatch(updateDeckHasError(true));\n        dispatch(updateDeckError('Try numerical Ids!'));\n      }\n    }\n  };\n\n  return (\n    <div className=\"searchBox\">\n      <label className=\"searchLableText\" htmlFor=\"deckId\">\n        Search for a decklist here\n      </label>\n      <input\n        id=\"deckId\"\n        type=\"text\"\n        placeholder=\"Enter the deck Id\"\n        onChange={inputHandler}\n        onKeyPress={userInputUpdateHandler}\n      />\n    </div>\n  );\n};\n\nexport default Search;\n","import { DeckCardsPropsIntf } from 'app/models/interfaces';\nimport 'app/components/DeckCards/DeckCard.css';\n\nconst DeckCards = ({ code, openCard, imagesrc }: DeckCardsPropsIntf) => {\n  return (\n    <div className=\"deckCard\" id={code} onClick={openCard}>\n      <img className=\"deckCardImg\" src={`https://ringsdb.com/${imagesrc}`} alt=\"Hero\" />\n    </div>\n  );\n};\n\nexport default DeckCards;\n","import { HeroCardpropsIntf } from 'app/models/interfaces'\nimport 'app/components/SingleCard/SingleCard.css'\n\nconst SingleCard = ({\n  name,\n  imagesrc,\n  closeBtn,\n  type_name,\n  traits,\n  text,\n  flavor,\n  threat,\n  willpower,\n  attack,\n  defense,\n  health,\n}: HeroCardpropsIntf) => {\n  return (\n    <div className=\"overLay\">\n      <div className=\"singleCard\">\n        <div className=\"singleCardHeader\">\n          <p className=\"titleText\">{name}</p>\n          <button className=\"closeBtn\" onClick={closeBtn}>\n            &#x2716;\n          </button>\n        </div>\n        <div className=\"singleCardContent\">\n          <div>\n            <img className=\"singleCardImg\" src={`https://ringsdb.com/${imagesrc}`} alt=\"Hero\" />\n          </div>\n          <div className=\"singleCardStats\">\n            <div className=\"cardInfoSection\">\n              <p className=\"titleText\">{type_name}</p>\n              <p className=\"boldText\">{traits}</p>\n            </div>\n            <div className=\"cardInfoSection\">\n              <p>Threat: {threat}</p>\n              <p>Health: {health}</p>\n              <p>Attack: {attack}</p>\n              <p>Defence: {defense}</p>\n              <p>Willpower: {willpower}</p>\n            </div>\n          </div>\n          <div className=\"singleCardInfo\">\n            <div className=\"cardInfoSection\">\n              <p>{text}</p>\n            </div>\n            <div className=\"cardInfoSection\">\n              <p>{flavor}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SingleCard\n","import { useState } from 'react';\nimport { useAppSelector } from 'app/hooks/hooks';\nimport { selectLotrDeck } from 'app/slices/lotrDeckSlice';\nimport { useFetchDeck } from 'app/hooks/useFetchDeck';\nimport DeckCards from 'app/components/DeckCards';\nimport SingleCard from 'app/components/SingleCard';\nimport { HeroCardIntf } from 'app/models/interfaces';\nimport 'app/components/Deck/Deck.css';\n\nconst Deck = () => {\n  // grants read access to state object\n  const lotrDeck = useAppSelector(selectLotrDeck);\n\n  // display switch fro single selected Hero card\n  const [singleHeroDisplay, setSingleHeroDisplay] = useState<boolean>(false);\n  // local state that holds information of single selected hero for singleCard component\n  const [singleHeroProps, setSingleHeroProps] = useState<HeroCardIntf>();\n\n  // custom hook that fetches the data from remote server and updates the state\n  useFetchDeck();\n\n  // opens single hero card by populating singleHeroProps state\n  const openCard = (e: React.MouseEvent<HTMLElement>) => {\n    const heroObject = lotrDeck.deckHeroCards.find(\n      (hero: HeroCardIntf) => hero.code === e.currentTarget.id\n    );\n    setSingleHeroProps(heroObject);\n    setSingleHeroDisplay(true);\n  };\n\n  // depopulates singleHeroProps which stops SingleCard component from being rendered and displayed\n  const closeCard = (): void => {\n    setSingleHeroDisplay(false);\n  };\n\n  // conditional rendering in case of errors in fetching the deck\n  if (lotrDeck.deckHasError) {\n    return (\n      <div>\n        <p className=\"deckTiltleText\">{lotrDeck.deckError}</p>\n      </div>\n    );\n  }\n\n  // conditional rendering in case of success in fetching the deck\n  return (\n    <div className=\"deckContainer\">\n      <p className=\"deckTiltleText\">{lotrDeck.deckResponse.name}</p>\n      <div className=\"cardsContainer\">\n        {lotrDeck.deckHeroCards.map((hero: HeroCardIntf) => {\n          return (\n            <DeckCards\n              code={hero.code}\n              key={hero.code}\n              imagesrc={hero.imagesrc}\n              openCard={openCard}\n            />\n          );\n        })}\n      </div>\n      {singleHeroDisplay === true ? (\n        <SingleCard\n          closeBtn={closeCard}\n          name={singleHeroProps!.name}\n          code={singleHeroProps!.code}\n          imagesrc={singleHeroProps!.imagesrc}\n          type_name={singleHeroProps!.type_name}\n          traits={singleHeroProps!.traits}\n          text={singleHeroProps!.text}\n          flavor={singleHeroProps!.flavor}\n          threat={singleHeroProps!.threat}\n          willpower={singleHeroProps!.willpower}\n          health={singleHeroProps!.health}\n          attack={singleHeroProps!.attack}\n          defense={singleHeroProps!.defense}\n        />\n      ) : (\n        <br />\n      )}\n    </div>\n  );\n};\n\nexport default Deck;\n","import { useEffect } from 'react';\nimport axios from 'axios';\nimport { useAppSelector, useAppDispatch } from 'app/hooks/hooks';\nimport {\n  updateDeckResponse,\n  updateDeckHasError,\n  updateDeckError,\n  updateHeroCards,\n  selectLotrDeck,\n  emptyHeroCards,\n} from 'app/slices/lotrDeckSlice';\n\nexport const useFetchDeck = () => {\n  const lotrDeck = useAppSelector(selectLotrDeck);\n  const dispatch = useAppDispatch();\n\n  // fetch deck and heros data and upate the state each time user enters new search term\n  useEffect(() => {\n    ; (async () => {\n      const customDeckUrl = lotrDeck.deckBaseUrl + lotrDeck.userInput + lotrDeck.deckResponseFormat;\n      try {\n        const deckRes = await axios.get(customDeckUrl);\n        if (deckRes.data.hasOwnProperty('error')) {\n          dispatch(updateDeckHasError(true));\n          dispatch(updateDeckError(deckRes.data.error));\n        } else if (!deckRes.data.hasOwnProperty('heroes')) {\n          dispatch(updateDeckHasError(true));\n          dispatch(updateDeckError('Deck is empty!'));\n        } else {\n          dispatch(updateDeckHasError(false));\n          dispatch(updateDeckResponse(deckRes.data));\n          dispatch(emptyHeroCards());\n\n          // fetch individual heros:\n          const heros = Object.keys(deckRes.data.heroes);\n          heros.forEach((hero) => {\n            ; (async () => {\n              try {\n                const customHeroUrl =\n                  lotrDeck.HeroCardBaseUrl + hero + lotrDeck.HeroCardResponseFormat;\n                const heroRes = await axios.get(customHeroUrl);\n                if (heroRes.data.hasOwnProperty('name')) {\n                  dispatch(updateHeroCards(heroRes.data));\n                }\n              } catch {\n                dispatch(updateDeckHasError(true));\n                dispatch(updateDeckError('Failed to retrieve data!'));\n              }\n            })();\n          });\n        }\n      } catch {\n        dispatch(updateDeckHasError(true));\n        dispatch(updateDeckError('Failed to retrieve data!'));\n      }\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lotrDeck.userInput]);\n};\n","import Search from 'app/components/Search';\nimport Deck from 'app/components/Deck';\nimport 'app/components/App/App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"appTitle\">Lord of the rings' card decks</h1>\n      <Search />\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport lotrDeckReducer from 'app/slices/lotrDeckSlice';\n\nexport const store = configureStore({\n  reducer: {\n    lotrDeck: lotrDeckReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          /* console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          ) */\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              /* console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              ) */\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              /* console.log('Content is cached for offline use.') */\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      /*  console.error('Error during service worker registration:', error) */\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      /* console.log('No internet connection found. App is running in offline mode.') */\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        /* console.error(error.message) */\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'app/components/App';\nimport { store } from 'app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}